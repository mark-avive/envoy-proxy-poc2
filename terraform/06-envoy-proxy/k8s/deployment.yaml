# Enhanced Envoy Deployment with Custom Image and Redis Support
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-proxy
  namespace: default
  labels:
    app: envoy-proxy
    component: reverse-proxy
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: envoy-proxy
  template:
    metadata:
      labels:
        app: envoy-proxy
        component: reverse-proxy
        version: v1.0.0
    spec:
      containers:
      - name: envoy
        image: 135135497055.dkr.ecr.us-west-2.amazonaws.com/cfndev-envoy-proxy-poc-envoy:latest
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9901
          name: admin
          protocol: TCP
        - containerPort: 9902
          name: metrics
          protocol: TCP
        env:
        - name: REDIS_HOST
          value: "redis-connection-tracker.default.svc.cluster.local"
        - name: REDIS_PORT
          value: "6379"
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MAX_CONNECTIONS_PER_POD
          value: "2"
        - name: RATE_LIMIT_REQUESTS_PER_MINUTE
          value: "60"
        volumeMounts:
        - name: envoy-config
          mountPath: /etc/envoy
          readOnly: true
        - name: lua-scripts
          mountPath: /etc/envoy/lua
          readOnly: true
        command:
        - /usr/local/bin/envoy
        args:
        - --config-path
        - /etc/envoy/envoy.yaml
        - --service-cluster
        - envoy-proxy
        - --service-node
        - envoy-proxy
        - --log-level
        - info
        resources:
          requests:
            cpu: 125m
            memory: 128Mi
          limits:
            cpu: 250m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /ready
            port: 9901
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 9901
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: envoy-config
        configMap:
          name: envoy-config
      - name: lua-scripts
        configMap:
          name: envoy-lua-scripts
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: envoy-proxy-service
  namespace: default
  labels:
    app: envoy-proxy
    component: reverse-proxy
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9901
    targetPort: 9901
    protocol: TCP
    name: admin
  selector:
    app: envoy-proxy

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: envoy-proxy-ingress
  namespace: default
  labels:
    app: envoy-proxy
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80}]'
    alb.ingress.kubernetes.io/healthcheck-path: /ready
    alb.ingress.kubernetes.io/healthcheck-port: "9901"
    alb.ingress.kubernetes.io/backend-protocol: HTTP
    alb.ingress.kubernetes.io/subnets: ${PUBLIC_SUBNET_IDS}
    alb.ingress.kubernetes.io/security-groups: ${ALB_SECURITY_GROUP_ID}
    alb.ingress.kubernetes.io/tags: "Project=envoy-poc,Environment=dev,ManagedBy=terraform,Purpose=envoy-proxy-poc"
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: envoy-proxy-service
            port:
              number: 80
